/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import dao.ConnectionProvider;
import java.awt.Color;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import utility.BDUtility;
import java.sql.*;
import java.text.MessageFormat;
import java.util.HashSet;
import java.util.Set;
import java.text.*;
import java.awt.print.*;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.OrientationRequested;
import javax.swing.JTable;

/**
 *
 * @author MOHAMMED ASLI
 */
public class ViewAttandance extends javax.swing.JFrame {

    private boolean addressIncluded;
    private boolean contectIncluded;
    private boolean countryIncluded;
    private boolean stateIncluded;
    private boolean cityIncluded;

    /**
     * Creates new form ViewAttandance
     */
    public ViewAttandance() {
        initComponents();

        BDUtility.setImage(this, "images/re.jpg", 1011, 501);
        this.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.BLACK));

        dateChooserFrom.setDateFormatString("yyyy-MM-dd");
        dateChooserTo.setDateFormatString("yyyy-MM-dd");
        // loadDataInTable();   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        dateChooserFrom = new com.toedter.calendar.JDateChooser();
        dateChooserTo = new com.toedter.calendar.JDateChooser();
        txtSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblPresent = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        presentLBL = new javax.swing.JLabel();
        absentLBL = new javax.swing.JLabel();
        lblAbsent = new javax.swing.JLabel();
        checkBoxContect = new javax.swing.JCheckBox();
        checkBoxState = new javax.swing.JCheckBox();
        checkBoxAddress = new javax.swing.JCheckBox();
        checkBoxUniqueRegId = new javax.swing.JCheckBox();
        checkBoxCountry = new javax.swing.JCheckBox();
        btnResetFilters = new javax.swing.JButton();
        cmd_print = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1011, 501));
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel2.setText("View Attendance");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 0, 300, -1));

        btnExit.setBackground(new java.awt.Color(204, 0, 0));
        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnExit.setText("X");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        getContentPane().add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 10, -1, -1));

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(userTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(229, 147, 740, 337));

        dateChooserFrom.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        dateChooserFrom.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateChooserFromPropertyChange(evt);
            }
        });
        getContentPane().add(dateChooserFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(189, 103, 231, 26));

        dateChooserTo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        dateChooserTo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateChooserToPropertyChange(evt);
            }
        });
        getContentPane().add(dateChooserTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(447, 103, 230, 26));

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        getContentPane().add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(695, 103, 274, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("On / From");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(189, 77, 77, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("To");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(447, 77, 38, -1));

        lblPresent.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPresent.setForeground(new java.awt.Color(0, 204, 0));
        lblPresent.setText("-----------");
        getContentPane().add(lblPresent, new org.netbeans.lib.awtextra.AbsoluteConstraints(97, 147, 71, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Search");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(695, 77, 58, -1));

        presentLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        presentLBL.setText("Present :");
        getContentPane().add(presentLBL, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 147, 58, -1));

        absentLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        absentLBL.setText("Absent :");
        getContentPane().add(absentLBL, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 179, 58, -1));

        lblAbsent.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblAbsent.setForeground(new java.awt.Color(204, 0, 0));
        lblAbsent.setText("-----------");
        getContentPane().add(lblAbsent, new org.netbeans.lib.awtextra.AbsoluteConstraints(97, 179, 71, -1));

        checkBoxContect.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxContect.setText("Contect");
        checkBoxContect.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxContectItemStateChanged(evt);
            }
        });
        checkBoxContect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxContectActionPerformed(evt);
            }
        });
        getContentPane().add(checkBoxContect, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 231, 121, -1));

        checkBoxState.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxState.setText("State");
        checkBoxState.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxStateItemStateChanged(evt);
            }
        });
        checkBoxState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxStateActionPerformed(evt);
            }
        });
        getContentPane().add(checkBoxState, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 315, 121, -1));

        checkBoxAddress.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxAddress.setText("Address");
        checkBoxAddress.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxAddressItemStateChanged(evt);
            }
        });
        checkBoxAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAddressActionPerformed(evt);
            }
        });
        getContentPane().add(checkBoxAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 273, 121, -1));

        checkBoxUniqueRegId.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxUniqueRegId.setText("Unique Reg ID");
        checkBoxUniqueRegId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxUniqueRegIdItemStateChanged(evt);
            }
        });
        checkBoxUniqueRegId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxUniqueRegIdActionPerformed(evt);
            }
        });
        getContentPane().add(checkBoxUniqueRegId, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 399, -1, -1));

        checkBoxCountry.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxCountry.setText("Country");
        checkBoxCountry.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxCountryItemStateChanged(evt);
            }
        });
        checkBoxCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxCountryActionPerformed(evt);
            }
        });
        getContentPane().add(checkBoxCountry, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 357, 121, -1));

        btnResetFilters.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnResetFilters.setText("Reset Filters");
        btnResetFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetFiltersActionPerformed(evt);
            }
        });
        getContentPane().add(btnResetFilters, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 450, 120, -1));

        cmd_print.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cmd_print.setText("Print");
        cmd_print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmd_printActionPerformed(evt);
            }
        });
        getContentPane().add(cmd_print, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 450, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void checkBoxContectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxContectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxContectActionPerformed

    private void checkBoxStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxStateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxStateActionPerformed

    private void checkBoxAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxAddressActionPerformed

    private void checkBoxUniqueRegIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxUniqueRegIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxUniqueRegIdActionPerformed

    private void checkBoxCountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxCountryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxCountryActionPerformed

    private void btnResetFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetFiltersActionPerformed
        // TODO add your handling code here:
        txtSearch.setText("");
        dateChooserFrom.setDate(null);
        dateChooserTo.setDate(null);
        checkBoxContect.setSelected(false);
        checkBoxAddress.setSelected(false);
        checkBoxState.setSelected(false);
        checkBoxCountry.setSelected(false);
        checkBoxUniqueRegId.setSelected(false);

        loadDataInTable();


    }//GEN-LAST:event_btnResetFiltersActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:

        loadDataInTable();


    }//GEN-LAST:event_formComponentShown

    private void checkBoxContectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxContectItemStateChanged
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_checkBoxContectItemStateChanged

    private void checkBoxAddressItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxAddressItemStateChanged
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_checkBoxAddressItemStateChanged

    private void checkBoxStateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxStateItemStateChanged
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_checkBoxStateItemStateChanged

    private void checkBoxCountryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxCountryItemStateChanged
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_checkBoxCountryItemStateChanged

    private void checkBoxUniqueRegIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxUniqueRegIdItemStateChanged
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_checkBoxUniqueRegIdItemStateChanged

    private void dateChooserFromPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateChooserFromPropertyChange
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_dateChooserFromPropertyChange

    private void dateChooserToPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateChooserToPropertyChange
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_dateChooserToPropertyChange

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:
        loadDataInTable();
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void cmd_printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmd_printActionPerformed
        // TODO add your handling code here:
        MessageFormat header = new MessageFormat("Attendance Report");
        MessageFormat footer = new MessageFormat("page  {0,number,integer}");
        try {
            PrintRequestAttributeSet set = new HashPrintRequestAttributeSet();
            set.add(OrientationRequested.PORTRAIT);
            userTable.print(JTable.PrintMode.FIT_WIDTH,header,footer,true,set,true);
            JOptionPane.showMessageDialog(null,"/n"+"Printed sucessfully");
            
        }catch(java.awt.print.PrinterException e){
            JOptionPane.showMessageDialog(null,"/n"+"Failed"+"/n"+e);
            
        }
    }//GEN-LAST:event_cmd_printActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewAttandance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewAttandance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewAttandance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewAttandance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewAttandance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel absentLBL;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnResetFilters;
    private javax.swing.JCheckBox checkBoxAddress;
    private javax.swing.JCheckBox checkBoxContect;
    private javax.swing.JCheckBox checkBoxCountry;
    private javax.swing.JCheckBox checkBoxState;
    private javax.swing.JCheckBox checkBoxUniqueRegId;
    private javax.swing.JButton cmd_print;
    private com.toedter.calendar.JDateChooser dateChooserFrom;
    private com.toedter.calendar.JDateChooser dateChooserTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAbsent;
    private javax.swing.JLabel lblPresent;
    private javax.swing.JLabel presentLBL;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables

   /* private void loadDataInTable() {
        
        List<String> columns = new ArrayList<>(Arrays.asList(
        "ID","Name","Gender","Email","Date","CheckIn","CheckOut","Work Duration"
        ));
        
        String searchText = txtSearch.getText().toString();
        Date fromDateFromCal =dateChooserFrom.getDate();
        LocalDate fromDate = null;
        if(fromDateFromCal != null){
            fromDate =fromDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            
        }
        
        Date toDateFromCal = dateChooserTo.getDate();
        LocalDate toDate =null;
        if(toDateFromCal !=null){
            toDate = toDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        }
        
        Long daysBetween = null;
        if(fromDate != null && toDate != null){
        daysBetween = countWeekdays(fromDate, toDate);
    }
        
        Boolean contectIncluded =checkBoxContect.isSelected();
        Boolean addressIncluded =checkBoxAddress.isSelected();
        Boolean stateIncluded =checkBoxState.isSelected();
        Boolean countryIncluded =checkBoxCountry.isSelected();
        Boolean uniqueRegIdIncluded =checkBoxUniqueRegId.isSelected();
        
        
        String sqlQuery = "SELECT ud.id , ud.name , ud.gender , ud.email , ua.date , ua.checkin , ua.checkout, ua.workduration ";
        if(contectIncluded){
            columns.add("Contect");
            sqlQuery += ", ud.contect";
        }
        
        if(addressIncluded){
            columns.add("Address");
            sqlQuery += ", ud.address";
        }
        
        if(stateIncluded){
            columns.add("State");
            sqlQuery += ", ud.state";
        }
        
        if(countryIncluded){
            columns.add("Country");
            sqlQuery += ", ud.country";
        }
        
        if(uniqueRegIdIncluded){
            columns.add("Unique Reg Id");
            sqlQuery += ", ud.uniqueregid";
        }
        
        sqlQuery += "FROM userdetails AS ud INNER JOIN userattandance AS ua ON ud.id = ua.userid ";
        
        if(searchText != null){
            sqlQuery += "where (ud.name like '%" + searchText + "%' or ud.email like '%" + searchText + "%') ";
            if(fromDate != null && toDate !=null){
                sqlQuery+= " AND ua.date BETWEEN '" + fromDate + "' AND '" + toDate +"'";
            }else if (fromDate != null){
                sqlQuery += "and ua.date = '" + fromDate +"'";  
            }
        }else{
            if(fromDate != null && toDate != null){
                sqlQuery+= " where ua.date BETWEEN '" + fromDate + "' AND '" + toDate +"'";
            }else if (fromDate != null){
                sqlQuery += "where ua.date = '" + fromDate +"'";  
            }
        }
        
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(columns.toArray());
        userTable.setModel(model);
        
        try{
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(sqlQuery);
            
            Long presentCount = 01L;
            Long absentCount = 01L;
            Set<String> emailList = new HashSet<>();
            while(rs.next()){
                List<Object> row = new ArrayList<>();
                row.add(rs.getString("id"));
                row.add(rs.getString("name"));
                row.add(rs.getString("gender"));
                row.add(rs.getString("email"));
                emailList.add(rs.getString("email"));
                row.add(rs.getString("date"));
                row.add(rs.getString("checkin"));
                row.add(rs.getString("checkout"));
                row.add(rs.getString("workduration"));
                
               if(contectIncluded){
                    row.add(rs.getString("contect"));
               }
                if(addressIncluded){
                    row.add(rs.getString("address"));
                }
                if(stateIncluded){
                row.add(rs.getString("country"));
                }
                if(countryIncluded){
                row.add(rs.getString("state"));
                }
                if(uniqueRegIdIncluded){
                row.add(rs.getString("uniqueregid"));
                }
                
                if(rs.getString("checkout")==null){
                    absentCount++;
                }else{
                    presentCount++;
                }
                model.addRow(row.toArray());
            }
            
        
            
            if(emailList.size()== 1){
                lblPresent.setVisible(true);
                lblAbsent.setVisible(true);
                presentLBL.setVisible(true);
                absentLBL.setVisible(true);
               lblPresent.setText(presentCount.toString());
               //lblPresent.setText(String.valueOf(presentCount));
               if(daysBetween!=null && daysBetween>0){
                   absentCount =  daysBetween-presentCount;
               }
               //lblAbsent.setText(String.valueOf(absentCount));
               lblAbsent.setText(absentCount.toString());
            }else{
                lblPresent.setVisible(false);
                lblAbsent.setVisible(false);
                presentLBL.setVisible(false);
                absentLBL.setVisible(false);
            }
            
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Somthing went wrong.");
        }
        
    }

    private Long countWeekdays(LocalDate start, LocalDate end) {
       long count = 0;
       LocalDate date = start;
       while(date.isBefore(end) || date.equals(end)){
           if(!(date.getDayOfWeek()== DayOfWeek.SATURDAY || date.getDayOfWeek() == DayOfWeek.SUNDAY)){
               
               count++;
               
           }
           date = date.plusDays(1);
       }
       return count;
    }
}*/
    public void loadDataInTable() {
        List<String> columns = new ArrayList<>(Arrays.asList(
                "ID", "Name", "Gender", "Email", "Date", "CheckIn", "CheckOut", "Work Duration"
        ));

        String searchText = txtSearch.getText().trim();
        Date fromDateFromCal = dateChooserFrom.getDate();
        LocalDate fromDate = fromDateFromCal != null
                ? fromDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()
                : null;

        Date toDateFromCal = dateChooserTo.getDate();
        LocalDate toDate = toDateFromCal != null
                ? toDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()
                : null;

        Long daysBetween = (fromDate != null && toDate != null) ? countWeekdays(fromDate, toDate) : null;

        boolean contectIncluded = checkBoxContect.isSelected();
        boolean addressIncluded = checkBoxAddress.isSelected();
        boolean stateIncluded = checkBoxState.isSelected();
        boolean countryIncluded = checkBoxCountry.isSelected();
        boolean uniqueRegIdIncluded = checkBoxUniqueRegId.isSelected();

        StringBuilder sqlQuery = new StringBuilder("SELECT ud.id, ud.name, ud.gender, ud.email, ua.date, ua.checkin, ua.checkout, ua.workduration");

        if (contectIncluded) {
            columns.add("Contect");
            sqlQuery.append(", ud.contect");
        }
        if (addressIncluded) {
            columns.add("Address");
            sqlQuery.append(", ud.address");
        }
        if (stateIncluded) {
            columns.add("State");
            sqlQuery.append(", ud.state");
        }
        if (countryIncluded) {
            columns.add("Country");
            sqlQuery.append(", ud.country");
        }
        if (uniqueRegIdIncluded) {
            columns.add("Unique Reg Id");
            sqlQuery.append(", ud.uniqueregid");
        }

        sqlQuery.append(" FROM userdetails AS ud INNER JOIN userattandance AS ua ON ud.id = ua.userid");

        List<String> conditions = new ArrayList<>();

        if (!searchText.isEmpty()) {
            conditions.add("(ud.name LIKE ? OR ud.email LIKE ?)");
        }
        if (fromDate != null && toDate != null) {
            conditions.add("ua.date BETWEEN ? AND ?");
        } else if (fromDate != null) {
            conditions.add("ua.date = ?");
        }

        if (!conditions.isEmpty()) {
            sqlQuery.append(" WHERE ").append(String.join(" AND ", conditions));
        }

        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(columns.toArray());
        userTable.setModel(model);

        try (Connection con = ConnectionProvider.getCon(); PreparedStatement pst = con.prepareStatement(sqlQuery.toString())) {

            int paramIndex = 1;
            if (!searchText.isEmpty()) {
                pst.setString(paramIndex++, "%" + searchText + "%");
                pst.setString(paramIndex++, "%" + searchText + "%");
            }
            if (fromDate != null && toDate != null) {
                pst.setDate(paramIndex++, java.sql.Date.valueOf(fromDate));
                pst.setDate(paramIndex++, java.sql.Date.valueOf(toDate));
            } else if (fromDate != null) {
                pst.setDate(paramIndex++, java.sql.Date.valueOf(fromDate));
            }

            try (ResultSet rs = pst.executeQuery()) {
                int presentCount = 0, absentCount = 0;
                Set<String> emailList = new HashSet<>();

                while (rs.next()) {
                    List<Object> row = new ArrayList<>();
                    row.add(rs.getString("id"));
                    row.add(rs.getString("name"));
                    row.add(rs.getString("gender"));
                    row.add(rs.getString("email"));
                    emailList.add(rs.getString("email"));
                    row.add(rs.getString("date"));
                    row.add(rs.getString("checkin"));
                    row.add(rs.getString("checkout"));
                    row.add(rs.getString("workduration"));

                    if (contectIncluded) {
                        row.add(rs.getString("contect"));
                    }
                    if (addressIncluded) {
                        row.add(rs.getString("address"));
                    }
                    if (countryIncluded) {
                        row.add(rs.getString("country"));
                    }
                    if (stateIncluded) {
                        row.add(rs.getString("state"));
                    }
                    if (uniqueRegIdIncluded) {
                        row.add(rs.getString("uniqueregid"));
                    }

                    if (rs.getString("checkout") == null) {
                        absentCount++;
                    } else {
                        presentCount++;
                    }
                    model.addRow(row.toArray());
                }

                if (emailList.size() == 1) {
                    lblPresent.setVisible(true);
                    lblAbsent.setVisible(true);
                    presentLBL.setVisible(true);
                    absentLBL.setVisible(true);

                    lblPresent.setText(String.valueOf(presentCount));
                    if (daysBetween != null && daysBetween > 0) {
                        absentCount = (int) (daysBetween - presentCount);
                    }
                    lblAbsent.setText(String.valueOf(absentCount));
                } else {
                    lblPresent.setVisible(false);
                    lblAbsent.setVisible(false);
                    presentLBL.setVisible(false);
                    absentLBL.setVisible(false);
                }
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong: " + ex.getMessage());
        }
    }

    private Long countWeekdays(LocalDate start, LocalDate end) {
        long count = 0;
        LocalDate date = start;
        while (!date.isAfter(end)) {
            if (date.getDayOfWeek() != DayOfWeek.SATURDAY && date.getDayOfWeek() != DayOfWeek.SUNDAY) {
                count++;
            }
            date = date.plusDays(1);
        }
        return count;
    }
}

